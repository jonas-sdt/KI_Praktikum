import xml.etree.ElementTree as ET
from action import Action
from q_learning import QValueAlgorithm

def write_q_values_to_xml(q_values, filename):
    # Erstellen des Wurzelelements der XML-Datei
    root = ET.Element("msg")

    # target-Element
    target_elem = ET.SubElement(root, "target")
    target_elem.text = "Record|Start|..."

    # seq-Element
    seq_elem = ET.SubElement(root, "seq")

    # Iteration Ã¼ber die Q-Werte und Zuweisung zu den Befehlssequenzen
    for state, q_values_state in q_values.items():
        # Erstellen eines Befehlssequenz-Elements
        sequence_elem = ET.SubElement(seq_elem, "s{:02d}".format(state))
        
        # Aktionen basierend auf den Q-Werten zuweisen
        for action, q_value in zip(Action, q_values_state):
            if q_value > 0:
                # Erstellen des Aktionselements und Zuweisen des Q-Werts als Textinhalt
                action_elem = ET.SubElement(sequence_elem, action.name.lower())
                action_elem.text = str(q_value)

    # Erstellen des Elementbaums und Schreiben der XML-Datei
    tree = ET.ElementTree(root)
    tree.write(filename)

if __name__ == '__main__':
    # Initialisierung des Q-Learning-Algorithmus
    q_learning = QValueAlgorithm()
    q_learning.run()

    # Abrufen der Q-Werte
    q_values = q_learning.q_values

    # Erstellen der XML-Datei mit den Befehlssequenzen und den zugewiesenen Q-Werten
    write_q_values_to_xml(q_values, "command_sequences.xml")